쿠키와 세션 핵심 요약

## 쿠키(Cookie)

### 기본 개념
- 클라이언트(브라우저) 측에 저장되는 문자열 형태의 key-value 데이터
- 최대 크기: 4KB

### 쿠키 처리 흐름
1. 브라우저가 최초 서버 호출 시 쿠키 확인 (없으면 전송 안 함)
2. 서버는 응답 시 `Set-Cookie` HTTP 헤더로 쿠키 전송
3. 브라우저는 유효기간에 따라 저장 방식 결정:
   - 유효기간 있음: 파일로 저장
   - 유효기간 없음: 메모리에 저장
4. 브라우저는 쿠키를 `Cookie` 헤더로 저장 (기본 경로: `/`)
5. 서버는 필요에 따라 전달받은 쿠키 활용

### 쿠키 종류
1. **시스템 자동 생성 쿠키**
   - 키: `JSESSIONID`
   - 값: 랜덤 문자열 (예: F994A31D7351DDE3862876D0B64C7040)
   - 메모리에 보관
   - 유효기간 지정

2. **개발자 정의 쿠키**
   - 이름 자유롭게 정의
   - 파일로 보관
   - 유효기간 명시 필요
   - Response 객체에 담아 전송 필요
   - 경로, 도메인 지정 가능

### 쿠키 구현 예시
```java
// 쿠키 설정
viewTodoCookie.setValue(todoListResult);
viewTodoCookie.setMaxAge(60 * 60 * 24); // 하루
viewTodoCookie.setPath("/");

// 쿠키 전송
resp.addCookie(viewTodoCookie);

// 쿠키 검색 메소드
private Cookie findCookie(Cookie[] cookies, String cookieName) {
    Cookie targetCookie = null;

    // 쿠키 검색 로직...

    return targetCookie;
}
```

## 세션(Session)

### 기본 개념
- 서버 측에 저장하는 임시 메모리
- 웹 서버는 기본적으로 무상태(Stateless)이나 임시 저장이 필요함

### 세션 활용
- 톰캣 서버(WAS = 웹서버 + JSP 컨테이너)에서 구현
- `HttpServletRequest`를 확장하여 세션 정보 제공

### 세션 기본 문법
```java
// 세터 (저장)
HttpSession session = req.getSession();
session.setAttribute("loginInfo", result); // 문자열 형태로 저장

// 게터 (조회)
HttpSession session = req.getSession();
String loginInfoSession = (String) session.getAttribute("loginInfo"); // Object 반환, 다운캐스팅 필요
```

### 로그인 세션 처리
1. 성공 시: 사용자 정보를 HttpSession에 저장 → 리스트 페이지로 이동
2. 실패 시: 로그인 폼으로 이동

## EL(Expression Language) 표기법

### 데이터 검색 범위 (순서대로 검색)
1. **Page Scope**: JSP의 `<c:set>` 지정 변수
2. **Request Scope**: `HttpServletRequest.setAttribute()`로 저장한 변수
3. **Session Scope**: `HttpSession.setAttribute()`로 저장한 변수
4. **Application Scope**: `ServletContext.setAttribute()`로 저장한 변수

결론, 화면에서, jsp 화면에서, ${loginInfo} 접근 순서
위에서, 1 -> 2 -> 3-> 4 , 모두 검색하고, 그리고 없으면, 진짜 없음.


## 필터와 리스너

### 필터
- 모든 요청이 반드시 거쳐가는 컴포넌트
- 예: 로그인 체크 필터 (Todo 접근 시 로그인 검증)

### 리스너
- 특정 이벤트 발생 시 자동 실행되는 객체
- 옵저버 패턴 활용 (1타 n피 효과)
- 사용 예시:
  - 로깅
  - 사용자 IP 정보 기록
  - 프로젝트 시작 시 객체 초기화 (커넥션 풀, enum 객체)
- 스프링에서 미리 로딩하는 방식으로 활용

## 웹 데이터 저장 전략
1. **장기 저장 데이터**: 데이터베이스 서버
2. **로그인 정보**: 서버의 임시 메모리(세션)
3. **노출 가능한 임시 데이터**: 쿠키 (예: 최근 조회 상품, Todo 정보)

## 기타 사항
- 쿠키는 문자열 타입으로만 저장, 한글 처리 시 URL 인코딩/디코딩 필요
- 웹 개발 초기: SSR(Server Side Rendering) → 현재: CSR(Client Side Rendering)
- 세션의 단점: 휘발성, 서버 자원 지속 사용
